#!/usr/bin/env python
# analyze_queues

import os, sys, getopt, re 
import datetime
import urllib
STARTUP_DIR=sys.path[0]
sys.path.append(os.path.join(STARTUP_DIR,"../../lib"))
#sys.path.append("home/glideinWMS/factory")

import xmlParse

# Convert particularly large numbers 
#    into kilo/megaseconds
def km(z):
   x = int(z)
   w = z*1.0e-3
   v = z*1.0e-6
   if len(str(x)) > 4:
      if len(str(x)) < 7:
         return "%.1f K" % w
      if len(str(x)) >= 7:
         return "%.1f M" % v
   else:
      return "%s" % x

def debug_print_dict(data):
   for period, p in data.iteritems():
      print period
      for frontend,f in p.iteritems():
         print "\t",frontend
         for entry,e in f.iteritems():
            print "\t\t", entry
            for element, value in e.iteritems():   
               print "\t\t\t", element,":", value
   return


def main():

   usage="""
USAGE: 
    -x [#] : interval to do verbose stats (default 24)
    --source [ABSPATH or http addr] : factory base (default current directory)
    -s [attribute]: sort by attribute 
         (Choises are: Running, Held, Idle, Unknown, 
              RunDiff(Running-ClientRegistered) and IdleDiff(Idle-RequestedIdle).
         Can omit capitalization.) 
    -f [frontend] : filter by a single frontend
         (can omit "frontend_" before name)
    -z: zero suppression (don't show entries with 0s across all attributes)
    -h : this usage message
"""
   x = 24
   dir = os.getcwd()
   sorting = 0
   sort_attribute = 0
   filter_frontend = 0
   zero_supp = 0
 
   try:
       opts, args = getopt.getopt(sys.argv[1:], 'x:hwf:s:z', ['source='])
   except getopt.GetoptError:
       print("\n Option not recognized or missing parameters.")
       print(" Use -h for usage.\n")
       sys.exit(0)
   for o, a in opts:
       if o == "-x":
           x = a
       elif o == "--source":
           dir = a
       elif o in ("-h", "-help"):
           print usage
           return
       elif o == "-s":
           sort_attribute = a.lower()
           sorting = 1
       elif o == "-z":
           zero_supp = 1 
       elif o == "-f":
           filter_frontend = a
           if 'frontend_' not in filter_frontend:
               filter_frontend = 'frontend_' + filter_frontend

   attributes = {'StatusRunning':0,'StatusHeld':0,'StatusIdle':0,
                         'StatusIdleOther':0,'ReqIdle':0,'ClientGlideTotal':0}
   sort_attributes = ['running','held','idle','unknown','rundiff','idlediff']
   attr_list = ['StatusRunning','StatusHeld','StatusIdle','StatusIdleOther','RunDiff','IdleDiff']

   if sort_attribute !=0:
      if sort_attribute not in sort_attributes:
         print("%s not in list of attributes. Choices are:\n" % sort_attribute)
         for a in sort_attributes:
            print a
         print
         return   
      sort_attribute = sort_attributes.index(sort_attribute)

   data = {}  #sorted data
   rrd_data = {} 
   rrd = "rrd_Status_Attributes.xml" 

   if "http" in dir:
       file_dir = os.path.join(dir, rrd)
   else: 
       file_dir = os.path.join(dir, "monitor", rrd)
   
   try:  
       u = urllib.urlopen(file_dir)        
       rrd_data = xmlParse.xmlfile2dict(u)
   except:
       print "\nCannot open", file_dir,"\n\tor",rrd,"was not found there.\n"
       raise
   u.close()

   # rrd_data[updated,total,entries[entry[total[periods], frontends[periods]]]]
   # rrd_data numbers verified by hand

##############################################################################
#   Rearranges rrd_data from data[entries][frontends][periods]  
#                   into data = [periods][frontends][entries][elements]
#      (periods are integers and in seconds)
###############################################################################


   frontend_list = []

   for entry in rrd_data['entries']:
      for frontend in rrd_data['entries'][entry]['frontends']:
         if frontend not in frontend_list:
            frontend_list.append(frontend)

   if filter_frontend != 0:
      if filter_frontend not in frontend_list:
         print "\nFrontend", filter_frontend, "not found at source.\n"
         print "Choices are:\n "
         for frontend in frontend_list:
            print frontend
         print
         sys.exit(1)
    
   for entry in rrd_data['entries']:
      for frontend in rrd_data['entries'][entry]['frontends']:
          
         #if filtering, only choose selected frontend 
         if filter_frontend != 0:
            if frontend != filter_frontend:
               continue
           
         for period, elements in rrd_data['entries'][entry]['frontends'][frontend]['periods'].iteritems():

            if int(period) not in data:
               data[int(period)] = {}
            if frontend not in data[int(period)]:
               data[int(period)][frontend] = {}
            if entry not in data[int(period)][frontend]:
               data[int(period)][frontend][entry] = {}
            
            for a in attributes.keys():
               if a not in data[int(period)][frontend][entry]:
                  data[int(period)][frontend][entry][a] = 0 
               data[int(period)][frontend][entry][a] += int(float(elements[a])*int(period))

   # data[period[frontend[entry[element[value]]]]]
   #'data' numbers verified by hand
   #debug_print_dict(data)
  
#####################################################################
# Organize totals/stats for each period, frontend, and entry independantly
######################################################################


   if filter_frontend == 0:
      print("""
Status Attributes analysis for All Entries - %s
""" % datetime.datetime.now().strftime("%d-%m-%Y_%H:%M:%S"))
   else: print("""
Status Attributes analysis for %s - %s
""" % (filter_frontend, datetime.datetime.now().strftime("%d-%m-%Y_%H:%M:%S")))

          
   period_data = {} 
   frontend_data = {} 
   entry_data = {} 
   entry_data_all_frontends = {} 
 
   for period, frontends in data.iteritems():
      period = int(period)
      period_data[period] = {}
      frontend_data[period] = {}
      entry_data[period] = {}
      entry_data_all_frontends[period] = {}
      for a in attributes.keys(): period_data[period][a]=0

      for frontend, entries in frontends.iteritems(): 
         frontend_data[period][frontend]={}
         entry_data[period][frontend] = {}
         for a in attributes.keys(): frontend_data[period][frontend][a]=0

         for entry, elements in entries.iteritems():
            entry_data[period][frontend][entry] = {}
            entry_data_all_frontends[period][entry] = {}
            for a in attributes.keys(): 
               entry_data[period][frontend][entry][a]=0
               entry_data_all_frontends[period][entry][a]=0

            for a in attributes.keys():
               entry_data[period][frontend][entry][a] += elements[a]  
               frontend_data[period][frontend][a] += elements[a] 
               period_data[period][a] += elements[a]
               entry_data_all_frontends[period][entry][a] += elements[a] 


######################################################################
#   Print
######################################################################

   # sort periods from least to greatest, with 24 hours at the top
   period_list = period_data.keys()
   period_list.sort()
   period_list.remove(86400)
   period_list.insert(0,86400)
      
   for period in period_list:
        
     title = ("Past %.1f hours" % (float(period)/3600))

     print(
"""----------------------------------------
%s:

Status Running: %s
Status Held: %s
Status Idle: %s
Status Unknown: %s
RunDiff (Running-ClientRegistered): %s
IdleDiff (Idle-RequestedIdle): %s
"""
     % (title, 
       km(period_data[period]['StatusRunning']), 
       km(period_data[period]['StatusHeld']), 
       km(period_data[period]['StatusIdle']), 
       km(period_data[period]['StatusIdleOther']), 
       km(abs(period_data[period]['StatusRunning'] - period_data[period]['ClientGlideTotal'])), 
       km(abs(period_data[period]['StatusIdle'] - period_data[period]['ReqIdle'])))) 

################################################################################
#    Print per entry stats (all frontends)
################################################################################

   period = int(x)*3600

   if filter_frontend == 0:

      print """
---------------------------------------
---------------------------------------
Per Entry (all frontends) stats for the past %s hours.\n""" % x

      print("%-40s%8s %8s %8s %8s   | %9s %9s\n" % ( 
                 "", "Running","Held","Idle","Unknown","RunDiff","IdleDiff"))

      to_be_printed = []
      for entry_name, entry in entry_data_all_frontends[period].iteritems():

         entry['RunDiff'] = abs(entry['StatusRunning']-entry['ClientGlideTotal'])
         entry['IdleDiff'] = abs(entry['StatusIdle']-entry['ReqIdle'])

         if zero_supp==1:
            sum = 0
            for a in attr_list:
               sum += entry[a]
            if sum==0:
               continue 

         to_be_printed.append((entry[attr_list[sort_attribute]],("%-40s%8s %8s %8s %8s   | %9s %9s"
                % (entry_name.lstrip("entry_"),
                   km(entry['StatusRunning']),
                   km(entry['StatusHeld']),
                   km(entry['StatusIdle']),
                   km(entry['StatusIdleOther']),
                   km(entry['RunDiff']),
                   km(entry['IdleDiff'])))))

      if sorting == 1:
         to_be_printed.sort()
         to_be_printed.reverse()
         for a in to_be_printed:
            print a[1]
      else: 
         for a in to_be_printed:
            print a[1]


################################################################################
#    Print per frontend per entry stats
################################################################################


   print """
---------------------------------------
---------------------------------------
Per Entry (per frontend) stats for the past %s hours.\n""" % (x)

   for frontend, entries in data[period].iteritems():

      to_be_printed = []
      if zero_supp==1:
         sum2 = 0;

      for entry_name, entry in entry_data[period][frontend].iteritems():
  
         entry['RunDiff'] = abs(entry['StatusRunning']-entry['ClientGlideTotal'])
         entry['IdleDiff'] = abs(entry['StatusIdle']-entry['ReqIdle'])

         if zero_supp==1:
            sum = 0
            for a in attr_list:
               sum += entry[a]
            if sum == 0:
               continue 
            sum2 += sum
        
         to_be_printed.append((entry[attr_list[sort_attribute]],("%-40s%8s %8s %8s %8s   | %9s %9s"
                % (entry_name.lstrip("entry_"),
                   km(entry['StatusRunning']),
                   km(entry['StatusHeld']),
                   km(entry['StatusIdle']),
                   km(entry['StatusIdleOther']),
                   km(entry['RunDiff']),
                   km(entry['IdleDiff'])))))

      if sorting == 1:
         if zero_supp==1 and sum2==0:
            continue
         to_be_printed.sort()
         to_be_printed.reverse()
         to_be_printed.insert(0,(0, "%-40s%8s %8s %8s %8s   | %9s %9s\n" % ( 
                     frontend, "Running","Held","Idle","Unknown","RunDiff","IdleDiff")))
         for a in to_be_printed:
            print a[1]
      else:
         if zero_supp==1 and sum2==0:
            continue 
         to_be_printed.insert(0,(0, "%-40s%8s %8s %8s %8s   | %9s %9s\n" % ( 
                     frontend, "Running","Held","Idle","Unknown","RunDiff","IdleDiff")))
         for a in to_be_printed:
            print a[1]
      print "\n"

################################################################################
#    Print Key
################################################################################


   print("""-----------------------------------
LEGEND:

K = x   1,000
M = x 100,000

RunDiff = StatusRunning - ClientRegistered (ClientGlideTotal)
IdleDiff = StatusIdle - RequestedIdle (ReqIdle)

-------------------------------------
        \n""")

if __name__ == "__main__":
   main()


