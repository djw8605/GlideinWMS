#!/usr/bin/env python

#
# Project:
#   glideinWMS
#
# File Version: 
#
# Description:
#  This program updates a glidein factory directory structure
#  based on a configuration file
#

import os
import sys

STARTUP_DIR=sys.path[0]

import os.path
import string
import shutil
import traceback
sys.path.append(os.path.join(STARTUP_DIR,"lib"))
sys.path.append(os.path.join(STARTUP_DIR,"../lib"))
import cgWParams
import cgWDictFile
import cgWConsts,cWConsts
import cgWCreate
import cgWParamDict


################################################################################

def main(params, old_params, update_scripts, writeback):
    # load old files
    old_glidein_dicts_obj=cgWParamDict.glideinDicts(old_params)
    old_glidein_dicts_obj.load()

    # create dictionaries for new params
    glidein_dicts_obj=cgWParamDict.glideinDicts(params)
    glidein_dicts_obj.populate()

    # merge them together
    glidein_dicts_obj.reuse(old_glidein_dicts_obj)

    # write to disk
    glidein_dicts_obj.save()
    glidein_dicts_obj.set_readonly(True)

    if update_scripts == 'yes':
        # copy the submit files
        cgWCreate.copy_exe(cgWConsts.STARTUP_FILE,glidein_dicts_obj.main_dicts.work_dir,params.src_dir, True)
        cgWCreate.copy_exe(cgWConsts.SUBMIT_WRAPPER,glidein_dicts_obj.main_dicts.work_dir,params.src_dir, True)
        cgWCreate.copy_exe(cgWConsts.LOCAL_START_WRAPPER,glidein_dicts_obj.main_dicts.work_dir,params.src_dir, True)
	
	    # copy privsep helper executables
        cgWCreate.copy_exe(cgWConsts.UPDATE_PROXY_FILE,glidein_dicts_obj.main_dicts.work_dir,params.src_dir, True)

        # recreate the init.d starup file
        startup_fname = os.path.join(glidein_dicts_obj.main_dicts.work_dir,cgWConsts.INITD_STARTUP_FILE)
        factory_dir = glidein_dicts_obj.main_dicts.work_dir
        
        # Remove startup file if already exists
        if os.path.exists(os.path.join(factory_dir, startup_fname)):
            os.remove(os.path.join(factory_dir, startup_fname))
        
        cgWCreate.create_initd_startup(startup_fname,
                                       factory_dir,
                                       os.path.realpath(os.path.join(STARTUP_DIR,'..')))
                                       
    # save config into file (with backup, since the old one already exists)
    cfgfile=os.path.join(glidein_dicts_obj.main_dicts.work_dir,cgWConsts.XML_CONFIG_FILE)
    
    if writeback == 'yes':                     
        # save config into file (with backup, since the old one already exists)
        params.save_into_file_wbackup(cfgfile,set_ro=True)
    
    # make backup copy that does not get overwritten on further reconfig
    cfgfile=cWConsts.insert_timestr(cfgfile)
    params.save_into_file(cfgfile,set_ro=True)
    
    print "Reconfigured glidein '%s'"%params.glidein_name
    print "Active entries are:"
    for entry in glidein_dicts_obj.active_sub_list:
        print "  %s"%entry
    print "Submit files are in %s"%glidein_dicts_obj.main_dicts.work_dir


############################################################
#
# S T A R T U P
# 
############################################################

if __name__ == '__main__':
    usage = "reconfig_glidein { -force_name name -writeback yes|no -update_scripts yes|no -xml xml | -help }"
    argv = sys.argv
    force_name = None
    writeback = 'no'
    update_scripts = 'no'
    xml = ''
    for i in range(len(argv)):
    	if argv[i] == '-force_name':
    	    force_name = argv[i+1]
    	if argv[i] == '-writeback':
    	    writeback = argv[i+1]
    	if argv[i] == '-update_scripts':
    	    update_scripts = argv[i+1]
    	if argv[i] == '-xml':
    	    xml = argv[i+1]
        if argv[i] == '-help':
			print usage
			sys.exit(1)
		
    args = [argv[0], xml]     
                
    try:
        params=cgWParams.GlideinParams(usage, os.path.join(STARTUP_DIR,"web_base"), args)
    except RuntimeError,e:
        print e
        sys.exit(1)

    if force_name!=None:
        if params.glidein_name!=force_name:
           print usage
           print ""
           print "This is not a '%s' config file ('%s' found)"%(force_name,params.glidein_name)
           sys.exit(1)
        
    if not (writeback in ('yes','no')):
        print usage
        print ""
        print "-writeback must be yes or no, found '%s'"%writeback
        sys.exit(1)
        
    try:
        old_config_file=os.path.join(params.submit_dir,cgWConsts.XML_CONFIG_FILE)
        if os.path.exists(old_config_file):
            try:
                old_params=cgWParams.GlideinParams(usage,os.path.join(STARTUP_DIR,"web_base"),[argv[0],old_config_file])
            except RuntimeError, e:
                raise RuntimeError,"Failed to load %s"%old_config_file
        else:
            raise RuntimeError,"Cannot find %s"%old_config_file
        
        main(params, old_params, update_scripts, writeback)
    	        
    except RuntimeError, e:
        print usage
        print ""
        print e
        sys.exit(1)


